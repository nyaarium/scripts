#!/bin/bash

set -e


# Parse flags
WATCH_INTERVAL=""
while [[ $# -gt 0 ]]; do
    case "$1" in
        --setup)
            if [ "$EUID" -ne 0 ]; then
                echo "Error: --setup must be run as root:"
                echo "  sudo $(realpath --relative-to=. "$0") --setup"
                echo ""
                exit 1
            fi

            apt install -y unison encfs
            echo ""

            # Check if metadata option exists
            if grep -q "options.*=.*metadata" "/etc/wsl.conf"; then
                echo "Metadata option already exists in wsl.conf. If you haven't already, restart WSL."
                echo ""
                echo "From Windows PowerShell, run:"
                echo "  wsl --shutdown"
            else
                echo "Updating wsl.conf with metadata option..."
                # Check if [automount] section exists
                if ! grep -q "\[automount\]" "/etc/wsl.conf"; then
                    echo >> "/etc/wsl.conf"
                    echo "[automount]" >> "/etc/wsl.conf"
                fi
                # Append under [automount] section
                sed -i '/\[automount\]/a options = "metadata"' "/etc/wsl.conf"
            
                echo "WSL configuration updated. Please restart WSL for changes to take effect."
                echo ""
                echo "From Windows PowerShell, run:"
                echo "  wsl --shutdown"
            fi
            
            echo ""
            exit 0
            ;;
        --watch)
            if [[ ! $2 =~ ^[0-9]+$ ]]; then
                echo "Error: --watch requires a number in seconds"
                echo "Usage: $0 [--watch <seconds>] DIR_LOCAL DIR_DEPOT"
                exit 1
            fi
            WATCH_INTERVAL="$2"
            shift 2
            ;;
        -*)
            echo "Error: Unknown flag $1"
            echo "Usage: $0 [--setup | --watch <seconds>] DIR_LOCAL DIR_DEPOT"
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# Validate remaining args are directories
if [ "$#" -ne 2 ]; then
    echo "Error: Expected exactly 2 directory arguments"
    echo "Usage: $0 [--setup | --watch <seconds>] DIR_LOCAL DIR_DEPOT"
    exit 1
fi

DIR_LOCAL="$1"
DIR_DEPOT="$2"
DIR_LOCAL=$(realpath "$DIR_LOCAL")
DIR_DEPOT=$(realpath "$DIR_DEPOT")

# Validate directories exist
if [ ! -d "$DIR_LOCAL" ] || [ ! -d "$DIR_DEPOT" ]; then
    echo "Error: Both parameters must be existing directories"
    exit 1
fi

# Test filesystem permission support
echo "Testing filesystem permission support..."
TEST_FILE_LOCAL="$DIR_LOCAL/.permission_test"
TEST_FILE_DEPOT="$DIR_DEPOT/.permission_test"

# Create test files
touch "$TEST_FILE_LOCAL" "$TEST_FILE_DEPOT"
chmod 664 "$TEST_FILE_LOCAL" "$TEST_FILE_DEPOT"

# Get actual permissions in octal
PERMS_LOCAL=$(stat -c '%a' "$TEST_FILE_LOCAL")
PERMS_DEPOT=$(stat -c '%a' "$TEST_FILE_DEPOT")

# Verify permissions applied
if [ "$PERMS_LOCAL" != "664" ]; then
    rm -f "$TEST_FILE_LOCAL" "$TEST_FILE_DEPOT"
    echo "Error: Filesystem for \"$DIR_LOCAL\" does not support Unix permissions"
    echo ""
    echo "Run this script as root with --setup flag:"
    echo "  sudo ./$(realpath --relative-to=. "$0") --setup"
    echo ""
    exit 1
fi
if [ "$PERMS_DEPOT" != "664" ]; then
    rm -f "$TEST_FILE_LOCAL" "$TEST_FILE_DEPOT"
    echo "Error: Filesystem for \"$DIR_DEPOT\" does not support Unix permissions"
    echo ""
    echo "Run this script as root with --setup flag:"
    echo "  sudo ./$(realpath --relative-to=. "$0") --setup"
    echo ""
    exit 1
fi

# Clean up test files
rm -f "$TEST_FILE_LOCAL" "$TEST_FILE_DEPOT"


# Beginning of the sync script

# Generate a consistent name based on the depot path
DEPOT_HASH=$(echo -n "$DIR_DEPOT" | base64 | tr -d '/+=' | cut -c1-32)
DIR_DEPOT_DECRYPTED="/tmp/encfs-mount-$DEPOT_HASH"

echo "Starting bidirectional sync between:"
echo "  $DIR_LOCAL"
echo "  $DIR_DEPOT"
echo ""

_cleanup() {
    # Unmount and cleanup encfs mount for depot
    if [ -d "$DIR_DEPOT_DECRYPTED" ]; then
        fusermount -u "$DIR_DEPOT_DECRYPTED" 2>/dev/null || true
        rmdir "$DIR_DEPOT_DECRYPTED" 2>/dev/null || true
    fi
}
trap _cleanup EXIT

_term() {
	echo "Caught kill signal! Gracefully stopping sync."

    kill -TERM $UNISON_PID 2>/dev/null || true

	was_gracefully_killed=true
	
    # Wait for sync to stop
    for i in {1..25}; do
        if ! kill -0 "$UNISON_PID" 2>/dev/null; then
            break
		fi
		sleep 1
	done

    # Force kill if still running
    if kill -0 "$UNISON_PID" 2>/dev/null; then
        kill -9 "$UNISON_PID" || true
    fi
    
    _cleanup

	if $was_gracefully_killed; then
		echo "Sync interrupted."
	else
		echo "Sync forcefully stopped."
	fi

    exit 0
}
trap _term TERM INT

# Set up encfs temp mount for depot
mkdir -p "$DIR_DEPOT_DECRYPTED"
echo "a" | encfs --standard --stdinpass --idle=0 --insecure --no-default-flags -o nonempty "$(realpath "$DIR_DEPOT")" "$(realpath "$DIR_DEPOT_DECRYPTED")"

# Run unison sync
nice -n 19 ionice -c 3 \
    unison "$DIR_LOCAL" "$DIR_DEPOT_DECRYPTED" \
    -batch \
    -fastcheck true \
    -ignoreinodenumbers \
    -links true \
    -maxthreads 8 \
    -owner -group -times \
    -perms 775 \
    -prefer newer \
    -rsync \
    -ui text \
    ${WATCH_INTERVAL:+"-watch"} \
    ${WATCH_INTERVAL:+"-repeat"} \
    ${WATCH_INTERVAL:+"$WATCH_INTERVAL"} \
    2>&1 &

UNISON_PID=$!

wait $UNISON_PID
