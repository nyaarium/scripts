#!/bin/bash

source ~/.env


command -v gh >/dev/null 2>&1 && gh auth status >/dev/null 2>&1
gh_ready_status=$?
if [ $gh_ready_status -ne 0 ]; then
  command -v gh >/dev/null
  if [ $? -ne 0 ]; then
    echo "⚠️  GitHub CLI is not installed. Exiting script."
  else
    echo "⚠️  GitHub CLI is not authenticated. Exiting script."
  fi
  exit 1
fi

# Check if a parameter is passed
alert_id="$1"
if [ -z "$alert_id" ]; then
  # No parameter passed, perform default paginated listing of alerts
  alerts=$(gh api -X GET /repos/:owner/:repo/code-scanning/alerts \
    --paginate \
    --jq '.[] | select(.state == "open") | [.number, .rule.id, .rule.description, .most_recent_instance.message.text] | @tsv')

  # Check if the API call was successful
  if [ $? -ne 0 ]; then
    echo "⚠️  Failed to retrieve alerts. Ensure Advanced Security is enabled for this repository."
    exit 1
  fi

  echo "$alerts" | while IFS=$'\t' read -r number rule_id rule_description message; do
    echo "-----------------------------"
    echo "Alert Number: $number"
    echo "Rule ID: $rule_id"
    echo "Description: $rule_description"
    echo "Message: $message"
  done

else
  # ID parameter passed

  # Fetch the alert details using GitHub CLI
  alert_details=$(gh api -X GET /repos/:owner/:repo/code-scanning/alerts/$alert_id \
  --jq '{description: .rule.description, message_text: .most_recent_instance.message.text}')

  # Extract description and message text
  description=$(echo "$alert_details" | jq -r '.description')
  message_text=$(echo "$alert_details" | jq -r '.message_text')

  # Form the input string for GPT
  input_string="$description\n$message_text"

  # Call GPT API
  response=$(echo "$input_string" | jq -sR \
  --arg prompt "Respond with \"out-of-scope - {REASON}\" or \"within-scope - {REASON}\". Take a look at this CVE alert and decide if it's something within scope to fix, or out-of-scope (simply wait for package maintainers to fix)\n\nI will not change out packages willy-nilly, so don't recommend package swapping unless it is required (abandoned repos).\n\n" \
  --arg model "gpt-4o" \
  --arg context_size "16383" \
  '{
    model: $model,
    messages: [
      { role: "system", content: "You are an API. Only respond with the PLAIN TEXT response. As an API, do not repeat the request question given, and do not explain or comment on anything more than necessary." },
      { role: "user", content: ($prompt + .) }
    ]
  }' | \
  curl -sSL -X POST "https://api.openai.com/v1/chat/completions" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_KEY" \
  --data @- | \
  jq -r '.choices[0].message.content')

  echo "$response"
fi
